# -*- coding: utf-8 -*-
"""Foto7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LiCm4Rn5b9Wzm1_JNt9erlge-XyRMsSt
"""

# ⬇️  Se è la prima volta che usi il notebook, abilita ipywidgets
# (Colab di solito li ha già installati)
!pip install --quiet pillow ipywidgets

import io
import numpy as np
from PIL import Image, ImageEnhance, ImageOps
from google.colab import files
import ipywidgets as widgets
from IPython.display import display, clear_output

# -----------------------------------------------------------
# 1.  Funzione di fusione "Soft Light" come in Photoshop
#    (lavora su array NumPy normalizzati 0-1)
# -----------------------------------------------------------
def soft_light(base, blend):
    base  = base.astype(np.float32) / 255.0
    blend = blend.astype(np.float32) / 255.0
    res   = np.empty_like(base)

    mask  = blend < 0.5
    res[mask]  = base[mask] - (1 - 2 * blend[mask]) * base[mask] * (1 - base[mask])
    res[~mask] = base[~mask] + (2 * blend[~mask] - 1) * (np.sqrt(base[~mask]) - base[~mask])

    res = np.clip(res * 255.0, 0, 255).astype(np.uint8)
    return res

# -----------------------------------------------------------
# 2.  Procedura di sviluppo “alla Photoshop”
# -----------------------------------------------------------
def process_image(pil_img):
    # --- 2.1 Duplica l’immagine  ---
    base = pil_img.convert("RGB")     # immagine originale
    base_np = np.asarray(base)        # Immagine originale come array NumPy per il merge finale
    dup  = base.copy()                # Duplica1

    # --- 2.2 Bilanciamento colore: Cyan -100 (togli rosso) ---
    dup_np = np.asarray(dup, dtype=np.int16)
    dup_np[:, :, 0] = np.clip(dup_np[:, :, 0] - 100, 0, 255)  # canale R ↘︎
    dup = Image.fromarray(dup_np.astype(np.uint8), "RGB")

    # --- 2.3 Inverti colori ---
    dup = ImageOps.invert(dup)

    # --- 2.4 Fusione “Luce soffusa” ---
    fused_np = soft_light(np.asarray(base), np.asarray(dup))
    opacity = 0.85
    # Converti in float per il calcolo, poi di nuovo in uint8
    merged_np = (fused_np.astype(np.float32) * opacity + \
                 base_np.astype(np.float32) * (1.0 - opacity)).astype(np.uint8)
    fused    = Image.fromarray(fused_np, "RGB")

    # --- 2.5 Ritocchi finali (+13 saturazione, luminosità, contrasto) ---
    fused = ImageEnhance.Color(fused).enhance(1.13)      # saturazione +13 %
    fused = ImageEnhance.Brightness(fused).enhance(1.13) # luminosità +13 %
    fused = ImageEnhance.Contrast(fused).enhance(1.13)   # contrasto +13 %

    # --- 2.6 Filtro Bilanciamento ---
    # Converti l'immagine PIL in array NumPy per la manipolazione dei canali
    fused_np_color_adjust = np.array(fused).astype(np.int16) # Usa int16 per evitare overflow/underflow durante i calcoli
    # Cyan -15 (interpretato come R = R - 15)
    fused_np_color_adjust[:, :, 0] = fused_np_color_adjust[:, :, 0] - 15
    # Verde +6 (G = G + 6)
    fused_np_color_adjust[:, :, 1] = fused_np_color_adjust[:, :, 1] + 15
    # Giallo -2 (interpretato come B = B + 2, per ridurre il giallo)
    fused_np_color_adjust[:, :, 2] = fused_np_color_adjust[:, :, 2] + 2
    # Assicurati che i valori rimangano nell'intervallo valido [0, 255]
    fused_np_color_adjust = np.clip(fused_np_color_adjust, 0, 255)

    # Riconverti l'array NumPy in immagine PIL
    fused = Image.fromarray(fused_np_color_adjust.astype(np.uint8), "RGB")
    return fused

# -----------------------------------------------------------
# 3.  Interfaccia: upload, process, download
# -----------------------------------------------------------
uploader     = widgets.FileUpload(accept='image/*', multiple=False)
process_btn  = widgets.Button(description='➜  Applica filtri', button_style='primary')
download_btn = widgets.Button(description='⬇️  Scarica risultato', disabled=True)
preview_out  = widgets.Output()

def on_process(_):
    if not uploader.value:
        return
    clear_output(wait=True)

    # Prendi il primo file caricato
    name, info = next(iter(uploader.value.items()))
    img_bytes  = io.BytesIO(info['content'])
    img        = Image.open(img_bytes).convert("RGB")

    result = process_image(img)
    result.save('output.png')

    with preview_out:
        preview_out.clear_output()
        display(result)

    download_btn.disabled = False
    display(widgets.VBox([uploader, process_btn, download_btn, preview_out]))

def on_download(_):
    files.download('output.png')

process_btn.on_click(on_process)
download_btn.on_click(on_download)

# Mostra il toolset
display(widgets.VBox([uploader, process_btn, download_btn, preview_out]))